/**
 * Script de d√©monstration - Configuration initiale "La Botte Secr√®te du Roi"
 * 
 * Ce script montre comment la r√©serve initiale (4 pions, 1 cavalier, 1 fou, 1 tour)
 * ouvre de nombreuses possibilit√©s strat√©giques d√®s le d√©but de la partie.
 */

import { 
  createInitialGameState
} from './gameLogic';
import {
  applyAction
} from './gameActions';
import {
  getAvailableActions,
  getPossibleMoves 
} from './gameAnalysis';

function demonstrateInitialStrategies() {
  console.log('=== D√âMONSTRATION: La Botte Secr√®te du Roi ===\n');
  
  // Cr√©er une nouvelle partie
  let gameState = createInitialGameState();
  
  console.log('üìã R√âSERVE INITIALE:');
  console.log(`Blanc: ${JSON.stringify(gameState.whiteReserve, null, 2)}`);
  console.log(`Noir: ${JSON.stringify(gameState.blackReserve, null, 2)}`);
  console.log();
  
  // Phase 1: Placement des rois
  console.log('üè∞ PHASE 1: Placement des rois');
  
  gameState = applyAction(gameState, {
    type: 'place_king',
    player: 'white',
    turn: 1,
    to: 'E1'
  });
  console.log('‚úÖ Roi blanc plac√© en E1');
  
  gameState = applyAction(gameState, {
    type: 'place_king',
    player: 'black',
    turn: 1,
    to: 'D8'
  });
  console.log('‚úÖ Roi noir plac√© en D8');
  console.log(`Phase de jeu: ${gameState.gamePhase}\n`);
  
  // Phase 2: Premi√®res actions tactiques
  console.log('‚ö° PHASE 2: Premi√®res actions tactiques possibles');
  
  const availableActions = getAvailableActions(gameState);
  console.log(`Actions disponibles pour ${gameState.currentPlayer}:`, availableActions);
  console.log();
  
  // Strat√©gie 1: D√©veloppement rapide avec placement de pi√®ces
  console.log('üéØ STRAT√âGIE 1: D√©veloppement rapide');
  
  // Blanc place un cavalier
  gameState = applyAction(gameState, {
    type: 'place_piece',
    player: 'white',
    turn: 2,
    piece: 'Knight',
    to: 'G1'
  });
  console.log('‚ôò Blanc place cavalier en G1');
  console.log(`R√©serve blanc: cavaliers=${gameState.whiteReserve.knights}`);
  
  // Noir place un fou
  gameState = applyAction(gameState, {
    type: 'place_piece',
    player: 'black',
    turn: 2,
    piece: 'Bishop',
    to: 'C8'
  });
  console.log('‚ôó Noir place fou en C8');
  console.log(`R√©serve noir: fous=${gameState.blackReserve.bishops}`);
  
  // Strat√©gie 2: Contr√¥le du centre avec pions
  console.log('\nüéØ STRAT√âGIE 2: Contr√¥le du centre');
  
  // Blanc place un pion central
  gameState = applyAction(gameState, {
    type: 'place_piece',
    player: 'white',
    turn: 3,
    piece: 'Pawn',
    to: 'D4'
  });
  console.log('‚ôô Blanc place pion en D4 (contr√¥le central)');
  console.log(`R√©serve blanc: pions=${gameState.whiteReserve.pawns}`);
  
  // Strat√©gie 3: Utilisation du coup sp√©cial roi + placement
  console.log('\nüéØ STRAT√âGIE 3: Coup sp√©cial roi + placement');
  
  // Noir utilise le coup sp√©cial: d√©place le roi et place une tour
  gameState = applyAction(gameState, {
    type: 'move_king_and_place',
    player: 'black',
    turn: 3,
    from: 'D8',
    to: 'E8',
    piece: 'Rook'
  });
  console.log('üëë Noir: Roi D8‚ÜíE8 + Tour plac√©e en D8 (1 seul coup!)');
  console.log(`R√©serve noir: tours=${gameState.blackReserve.rooks}`);
  
  // Analyse finale
  console.log('\nüìä ANALYSE DE LA POSITION:');
  console.log('Pi√®ces sur l\'√©chiquier:');
  
  let pieceCount = { white: 0, black: 0 };
  for (let rank = 0; rank < 8; rank++) {
    for (let file = 0; file < 8; file++) {
      const piece = gameState.board[rank][file];
      if (piece) {
        if (piece.startsWith('White')) pieceCount.white++;
        else pieceCount.black++;
        
        const position = String.fromCharCode(65 + file) + (rank + 1);
        console.log(`  ${position}: ${piece}`);
      }
    }
  }
  
  console.log(`\nNombre de pi√®ces: Blanc=${pieceCount.white}, Noir=${pieceCount.black}`);
  console.log('\nR√©serves restantes:');
  console.log(`Blanc: ${JSON.stringify(gameState.whiteReserve, null, 2)}`);
  console.log(`Noir: ${JSON.stringify(gameState.blackReserve, null, 2)}`);
  
  console.log('\nüèÜ AVANTAGES de cette configuration initiale:');
  console.log('‚Ä¢ D√©veloppement imm√©diat possible (pas besoin de g√©n√©rer)');
  console.log('‚Ä¢ Choix tactiques d√®s les premiers coups');
  console.log('‚Ä¢ √âconomie de coups (pas de g√©n√©ration obligatoire)');
  console.log('‚Ä¢ Strat√©gies d\'ouverture vari√©es');
  console.log('‚Ä¢ √âquilibre entre d√©veloppement et r√©serve');
}

// Exporter pour utilisation dans des tests ou d√©mos
export { demonstrateInitialStrategies };

// Ex√©cuter si appel√© directement
if (require.main === module) {
  demonstrateInitialStrategies();
}
