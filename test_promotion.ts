import { createInitialGameState } from './src/secretKingBoot/gameLogic';
import { applyAction } from './src/secretKingBoot/gameActions';
import { getAvailableActions } from './src/secretKingBoot/gameAnalysis';
import { SecretKingBootGameState, GameAction } from './src/secretKingBoot/types';

console.log('üß™ Test du syst√®me de promotion des pions');

// Cr√©er un √©tat de jeu avec un pion pr√®s de la promotion
function createPromotionTestState(): SecretKingBootGameState {
  const gameState = createInitialGameState();
  
  // Placer les rois
  gameState.whiteKingPosition = 'E1';
  gameState.blackKingPosition = 'E8';
  gameState.gamePhase = 'playing';
  
  // Mettre un roi blanc en E1 et noir en E8
  gameState.board[0][4] = 'WhiteKing';
  gameState.board[7][4] = 'BlackKing';
  
  // Placer un pion blanc en 7√®me rang√©e (pr√™t √† √™tre promu)
  gameState.board[6][0] = 'WhitePawn'; // A7
  
  // Mettre quelques pi√®ces en r√©serve
  gameState.whiteReserve.pawns = 2;
  gameState.blackReserve.pawns = 2;
  
  return gameState;
}

// Test 1: D√©placer un pion √† la derni√®re rang√©e
console.log('\nüìã Test 1: Mouvement de pion vers la derni√®re rang√©e');

let gameState = createPromotionTestState();
console.log('√âtat initial:');
console.log('- Pion blanc en A7:', gameState.board[6][0]);
console.log('- Actions disponibles:', getAvailableActions(gameState));

// D√©placer le pion de A7 √† A8
const moveAction: GameAction = {
  type: 'move_piece',
  player: 'white',
  turn: gameState.turn,
  from: 'A7',
  to: 'A8'
};

console.log('\nüöÄ Application du mouvement A7 ‚Üí A8');
gameState = applyAction(gameState, moveAction);

console.log('√âtat apr√®s mouvement:');
console.log('- Case A8:', gameState.board[7][0]);
console.log('- Promotion requise:', gameState.promotionRequired);
console.log('- Actions disponibles:', getAvailableActions(gameState));

if (gameState.promotionRequired) {
  console.log('‚úÖ Promotion correctement d√©tect√©e!');
  console.log('- De:', gameState.promotionRequired.from);
  console.log('- Vers:', gameState.promotionRequired.to);
  console.log('- Joueur:', gameState.promotionRequired.player);
  
  // Test 2: S√©lectionner une pi√®ce de promotion
  console.log('\nüìã Test 2: S√©lection de la Dame pour la promotion');
  
  const promotionAction: GameAction = {
    type: 'select_promotion',
    player: 'white',
    turn: gameState.turn,
    piece: 'Queen'
  };
  
  console.log('üéØ Application de la promotion en Dame');
  gameState = applyAction(gameState, promotionAction);
  
  console.log('√âtat apr√®s promotion:');
  console.log('- Case A8:', gameState.board[7][0]);
  console.log('- Promotion requise:', gameState.promotionRequired);
  console.log('- Actions disponibles:', getAvailableActions(gameState));
  
  if (gameState.board[7][0] === 'WhiteQueen') {
    console.log('‚úÖ Promotion en Dame r√©ussie!');
  } else {
    console.log('‚ùå Promotion √©chou√©e');
  }
} else {
  console.log('‚ùå Promotion non d√©tect√©e');
}

console.log('\nüèÅ Test termin√©');
