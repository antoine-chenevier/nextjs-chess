import { 
  createInitialGameState,
  isValidAction,
  updateGameStateWithChessLogic,
  isKingInCheck
} from '../src/secretKingBoot/gameLogic';
import { applyAction } from '../src/secretKingBoot/gameActions';
import { GameAction } from '../src/secretKingBoot/types';

/**
 * Test pour v√©rifier que quand un joueur est en √©chec, il ne peut jouer qu'un seul tour
 */

console.log('üß™ Test de correction - Pas de tours multiples en √©chec');

// Cr√©er un √©tat initial
let gameState = createInitialGameState();

// Placer les rois
const placeWhiteKing: GameAction = {
  type: 'place_king',
  player: 'white',
  turn: 1,
  to: 'E1'
};

const placeBlackKing: GameAction = {
  type: 'place_king',
  player: 'black', 
  turn: 1,
  to: 'E8'
};

// Appliquer le placement des rois
if (isValidAction(gameState, placeWhiteKing).valid) {
  gameState = applyAction(gameState, placeWhiteKing);
  console.log('‚úÖ Roi blanc plac√© en E1');
}

if (isValidAction(gameState, placeBlackKing).valid) {
  gameState = applyAction(gameState, placeBlackKing);
  console.log('‚úÖ Roi noir plac√© en E8');
}

// Passer en mode jeu
gameState.gamePhase = 'playing';

console.log('\nüìã Test 1: Situation normale - alternance des joueurs');
console.log(`Joueur actuel: ${gameState.currentPlayer}`);

// Test normal - placer une pi√®ce
const placePawn1: GameAction = {
  type: 'place_piece',
  player: gameState.currentPlayer,
  turn: gameState.turn,
  to: 'A2',
  piece: 'Pawn'
};

if (isValidAction(gameState, placePawn1).valid) {
  const previousPlayer = gameState.currentPlayer;
  gameState = applyAction(gameState, placePawn1);
  console.log(`Apr√®s placement pion: ${previousPlayer} -> ${gameState.currentPlayer}`);
  console.log('‚úÖ Changement de joueur normal');
} else {
  console.log('‚ùå Impossible de placer le pion');
}

console.log('\nüìã Test 2: Cr√©er une situation d\'√©chec');

// Placer une tour blanche qui met le roi noir en √©chec
const placeTowerCheck: GameAction = {
  type: 'place_piece',
  player: gameState.currentPlayer,
  turn: gameState.turn,
  to: 'E7', // Une case devant le roi noir
  piece: 'Rook'
};

if (isValidAction(gameState, placeTowerCheck).valid) {
  const previousPlayer = gameState.currentPlayer;
  gameState = applyAction(gameState, placeTowerCheck);
  console.log(`Apr√®s placement tour: ${previousPlayer} -> ${gameState.currentPlayer}`);
  
  // Mettre √† jour avec la logique d'√©checs pour d√©tecter l'√©chec
  gameState = updateGameStateWithChessLogic(gameState);
  
  console.log('√âtat du jeu apr√®s analyse:', gameState.gameStatus?.status);
  console.log('Joueur en √©chec:', gameState.gameStatus?.player);
  console.log('Roi noir en √©chec?', isKingInCheck(gameState, 'black'));
  
  if (gameState.gameStatus?.status === 'check' && gameState.gameStatus?.player === 'black') {
    console.log('‚úÖ √âchec correctement d√©tect√©');
  } else {
    console.log('‚ùå √âchec non d√©tect√©');
  }
} else {
  console.log('‚ùå Impossible de placer la tour');
}

console.log('\nüìã Test 3: V√©rifier l\'alternance apr√®s un mouvement en √©chec');
console.log(`Joueur actuel (doit √™tre noir et en √©chec): ${gameState.currentPlayer}`);

// Maintenant le joueur noir est en √©chec et doit faire un mouvement pour sortir de l'√©chec
// Essayons de d√©placer le roi noir
const moveKingBlack: GameAction = {
  type: 'move_piece',
  player: 'black',
  turn: gameState.turn,
  from: 'E8',
  to: 'D8', // D√©placer le roi noir vers D8 pour sortir de l'√©chec
  piece: 'BlackKing'
};

if (isValidAction(gameState, moveKingBlack).valid) {
  const previousPlayer = gameState.currentPlayer;
  const previousTurn = gameState.turn;
  gameState = applyAction(gameState, moveKingBlack);
  
  console.log(`Apr√®s mouvement du roi noir: ${previousPlayer} -> ${gameState.currentPlayer}`);
  console.log(`Tour: ${previousTurn} -> ${gameState.turn}`);
  
  // V√©rifier que l'√©chec est r√©solu
  const newStatus = gameState.gameStatus?.status;
  console.log('Nouveau statut du jeu:', newStatus);
  console.log('Roi noir encore en √©chec?', isKingInCheck(gameState, 'black'));
  
  if (gameState.currentPlayer === 'white') {
    console.log('‚úÖ Changement de joueur correct apr√®s sortie d\'√©chec');
  } else {
    console.log('‚ùå ERREUR: Le joueur noir peut encore jouer!');
  }
} else {
  console.log('‚ùå Mouvement du roi invalide:', isValidAction(gameState, moveKingBlack).reason);
}

console.log('\nüìã Test 4: V√©rifier qu\'on ne peut pas jouer deux tours cons√©cutifs');

// Essayer de faire jouer le noir une seconde fois (ne devrait pas √™tre possible)
const attemptSecondMove: GameAction = {
  type: 'place_piece',
  player: 'black', // Mauvais joueur - c'est au tour du blanc
  turn: gameState.turn,
  to: 'H7',
  piece: 'Pawn'
};

const validation = isValidAction(gameState, attemptSecondMove);
if (!validation.valid) {
  console.log('‚úÖ Second mouvement correctement rejet√©:', validation.reason);
} else {
  console.log('‚ùå ERREUR: Second mouvement autoris√©!');
}

console.log('\nüéâ Tests termin√©s!');
console.log('\nüìä R√©sum√© de l\'√©tat final:');
console.log(`- Joueur actuel: ${gameState.currentPlayer}`);
console.log(`- Tour: ${gameState.turn}`);
console.log(`- Statut: ${gameState.gameStatus?.status || 'playing'}`);
console.log(`- Roi blanc en √©chec: ${isKingInCheck(gameState, 'white')}`);
console.log(`- Roi noir en √©chec: ${isKingInCheck(gameState, 'black')}`);
