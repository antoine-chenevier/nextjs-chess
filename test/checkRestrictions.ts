import { 
  createInitialGameState,
  isValidAction,
  updateGameStateWithChessLogic,
  isKingInCheck
} from '../src/secretKingBoot/gameLogic';
import { applyAction } from '../src/secretKingBoot/gameActions';
import { GameAction } from '../src/secretKingBoot/types';

/**
 * Test pour v√©rifier qu'on ne peut pas g√©n√©rer ou √©changer des pions quand le roi est en √©chec
 */

console.log('üß™ Test des restrictions en cas d\'√©chec - Generation et √©change de pions');

// Cr√©er un √©tat initial
let gameState = createInitialGameState();

// Placer les rois
const placeWhiteKing: GameAction = {
  type: 'place_king',
  player: 'white',
  turn: 1,
  to: 'E1'
};

const placeBlackKing: GameAction = {
  type: 'place_king',
  player: 'black', 
  turn: 1,
  to: 'E8'
};

// Appliquer le placement des rois
if (isValidAction(gameState, placeWhiteKing).valid) {
  gameState = applyAction(gameState, placeWhiteKing);
  console.log('‚úÖ Roi blanc plac√© en E1');
}

if (isValidAction(gameState, placeBlackKing).valid) {
  gameState = applyAction(gameState, placeBlackKing);
  console.log('‚úÖ Roi noir plac√© en E8');
}

// Passer en mode jeu
gameState.gamePhase = 'playing';

console.log('\nüìã Test 1: G√©n√©ration de pion quand le roi N\'EST PAS en √©chec');

// Test 1: G√©n√©ration normale (roi pas en √©chec)
const generatePawnNormal: GameAction = {
  type: 'generate_pawn',
  player: gameState.currentPlayer,
  turn: gameState.turn
};

const validation1 = isValidAction(gameState, generatePawnNormal);
console.log('Validation g√©n√©ration pion (roi pas en √©chec):', validation1.valid);

if (validation1.valid) {
  gameState = applyAction(gameState, generatePawnNormal);
  console.log('‚úÖ Pion g√©n√©r√© avec succ√®s');
} else {
  console.log('‚ùå √âchec inattendu:', validation1.reason);
}

console.log('\nüìã Test 2: √âchange de pions quand le roi N\'EST PAS en √©chec');

// Test 2: √âchange normal (roi pas en √©chec)
const exchangeNormal: GameAction = {
  type: 'exchange_pieces',
  player: gameState.currentPlayer,
  turn: gameState.turn,
  exchangeFrom: 'pawn',
  exchangeTo: 'knights',
  cost: 2
};

const validation2 = isValidAction(gameState, exchangeNormal);
console.log('Validation √©change pions (roi pas en √©chec):', validation2.valid);

if (validation2.valid) {
  gameState = applyAction(gameState, exchangeNormal);
  console.log('‚úÖ √âchange r√©alis√© avec succ√®s');
} else {
  console.log('‚ùå √âchec inattendu:', validation2.reason);
}

console.log('\nüìã Test 3: Cr√©er une situation d\'√©chec');

// Cr√©er une situation d'√©chec en pla√ßant une tour blanche qui attaque le roi noir
const placeTowerCheck: GameAction = {
  type: 'place_piece',
  player: 'white',
  turn: gameState.turn,
  to: 'E7', // Une case devant le roi noir
  piece: 'Rook'
};

if (isValidAction(gameState, placeTowerCheck).valid) {
  gameState = applyAction(gameState, placeTowerCheck);
  console.log('‚úÖ Tour blanche plac√©e en E7');
  
  // Mettre √† jour avec la logique d'√©checs pour d√©tecter l'√©chec
  gameState = updateGameStateWithChessLogic(gameState);
  
  console.log('√âtat du jeu apr√®s analyse:', gameState.gameStatus?.status);
  console.log('Joueur en √©chec:', gameState.gameStatus?.player);
  console.log('Roi noir en √©chec?', isKingInCheck(gameState, 'black'));
} else {
  console.log('‚ùå Impossible de placer la tour');
}

// Passer au tour du joueur noir (qui est maintenant en √©chec)
gameState.currentPlayer = 'black';

console.log('\nüìã Test 4: Tentative de g√©n√©ration de pion quand le roi EST en √©chec');

const generatePawnInCheck: GameAction = {
  type: 'generate_pawn',
  player: 'black',
  turn: gameState.turn
};

const validation4 = isValidAction(gameState, generatePawnInCheck);
console.log('Validation g√©n√©ration pion (roi en √©chec):', validation4.valid);

if (!validation4.valid) {
  console.log('‚úÖ G√©n√©ration correctement bloqu√©e:', validation4.reason);
} else {
  console.log('‚ùå ERREUR: G√©n√©ration autoris√©e alors que le roi est en √©chec');
}

console.log('\nüìã Test 5: Tentative d\'√©change de pions quand le roi EST en √©chec');

const exchangeInCheck: GameAction = {
  type: 'exchange_pieces',
  player: 'black',
  turn: gameState.turn,
  exchangeFrom: 'pawn',
  exchangeTo: 'knights',
  cost: 2
};

const validation5 = isValidAction(gameState, exchangeInCheck);
console.log('Validation √©change pions (roi en √©chec):', validation5.valid);

if (!validation5.valid) {
  console.log('‚úÖ √âchange correctement bloqu√©:', validation5.reason);
} else {
  console.log('‚ùå ERREUR: √âchange autoris√© alors que le roi est en √©chec');
}

console.log('\nüéâ Tests termin√©s!');
console.log('\nüìä R√©sum√©:');
console.log(`- G√©n√©ration normale: ${validation1.valid ? 'OK' : '√âCHEC'}`);
console.log(`- √âchange normal: ${validation2.valid ? 'OK' : '√âCHEC'}`);
console.log(`- G√©n√©ration en √©chec: ${!validation4.valid ? 'OK (bloqu√©)' : '√âCHEC (autoris√©)'}`);
console.log(`- √âchange en √©chec: ${!validation5.valid ? 'OK (bloqu√©)' : '√âCHEC (autoris√©)'}`);
